package wblut.isogrid;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;

public class WB_IsoCubeGridExporter {

	

	public static void export(WB_IsoCubeGrid grid, String path) {
		int[][][] vertexIndices;
		List<double[]> vertices;
		List<int[]> faces;
		
		vertexIndices = new int[grid.getI() + 1][grid.getJ() + 1][grid.getK() + 1];
		for (int i = 0; i <= grid.getI(); i++) {
			for (int j = 0; j <= grid.getJ(); j++) {
				for (int k = 0; k <= grid.getK(); k++) {
					vertexIndices[i][j][k] = -1;
				}
			}
		}
		vertices = new ArrayList<double[]>();
		faces = new ArrayList<int[]>();
		int val0, valm, sum;
		for (int i = grid.getLi(); i <= grid.getUi(); i++) {
			for (int j = grid.getLj(); j < grid.getUj(); j++) {
				for (int k = grid.getLk(); k < grid.getUk(); k++) {
					val0 = grid.get(i, j, k) ? 1 : 0;
					valm = grid.get(i - 1, j, k) ? 1 : 0;
					sum = val0 + valm;
					if (sum == 1) {
						faces.add(new int[] { getVertexIndex(grid, i, j, k,vertexIndices,vertices), getVertexIndex(grid, i, j + 1, k,vertexIndices,vertices),
								getVertexIndex(grid, i, j + 1, k + 1,vertexIndices,vertices), getVertexIndex(grid, i, j, k + 1,vertexIndices,vertices)

						});
					}
				}
			}
		}
		for (int i = grid.getLi(); i < grid.getUi(); i++) {
			for (int j = grid.getLj(); j <= grid.getUj(); j++) {
				for (int k = grid.getLk(); k < grid.getUk(); k++) {
					val0 = grid.get(i, j, k) ? 1 : 0;
					valm = grid.get(i, j - 1, k) ? 1 : 0;
					sum = val0 + valm;
					if (sum == 1) {
						faces.add(new int[] { getVertexIndex(grid, i, j, k,vertexIndices,vertices), getVertexIndex(grid, i + 1, j, k,vertexIndices,vertices),
								getVertexIndex(grid, i + 1, j, k + 1,vertexIndices,vertices), getVertexIndex(grid, i, j, k + 1,vertexIndices,vertices) });
					}
				}
			}
		}
		for (int i = grid.getLi(); i < grid.getUi(); i++) {
			for (int j = grid.getLj(); j < grid.getUj(); j++) {
				for (int k = grid.getLk(); k <= grid.getUk(); k++) {
					val0 = grid.get(i, j, k) ? 1 : 0;
					valm = grid.get(i, j, k - 1) ? 1 : 0;
					sum = val0 + valm;
					if (sum == 1) {
						faces.add(new int[] { getVertexIndex(grid, i, j, k,vertexIndices,vertices), getVertexIndex(grid, i + 1, j, k,vertexIndices,vertices),
								getVertexIndex(grid, i + 1, j + 1, k,vertexIndices,vertices), getVertexIndex(grid, i, j + 1, k,vertexIndices,vertices) });
					}
				}
			}
		}
		
		
		try( BufferedWriter objwriter = new BufferedWriter(new FileWriter(path))) {
			objwriter.write("# generated by WB_IsoCubeGridExporter");
			objwriter.newLine();
			for(double[] vertex: vertices) {
				objwriter.write("v "+vertex[0]+" "+vertex[1]+" "+vertex[2]);
				objwriter.newLine();
			}
			for(int[] face: faces) {
				objwriter.write("f "+face[0]+" "+face[1]+" "+face[2]);
				objwriter.newLine();
				objwriter.write("f "+face[2]+" "+face[3]+" "+face[0]);
				objwriter.newLine();
			}
			
		
		}catch(Exception e) {
			
		}
		
		

	}

	private static int getVertexIndex(WB_IsoCubeGrid grid, int i, int j, int k, int[][][] vertexIndices, List<double[]> vertices) {
		double[] c = grid.getMin();
		if (vertexIndices[i][j][k] == -1) {
			vertexIndices[i][j][k] = vertices.size();
			vertices.add(new double[] { c[0] + i * grid.getDX(), c[1] + j * grid.getDY(), c[2] + k * grid.getDZ() });
		}
		return vertexIndices[i][j][k];

	}

}
